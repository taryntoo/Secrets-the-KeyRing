/**
 Created by taryn, Copyright 2014.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

Secrets
Fumbling for keys in the dark: Casting light on the keychain APIs.

These are working notes, mostly useless

Testing the keyring code:

Search for TestKeyRingAtAppStartup in AppDelegate.m.
If it's set true, the keyring code will be tested on every application start.


 
 References:
 Underlying Technical Models for Information Technology Security 
    http://csrc.nist.gov/publications/nistpubs/800-33/sp800-33.pdf
    
 Apple's iOS Security, February 2014
    https://images.apple.com/iphone/business/docs/iOS_Security_Feb14.pdf
    
XKCD.com

The Worst API Ever Made
    http://mollyrocket.com/casey/stream_0029.html?imm_mid=0c1649&cmp=em-prog-na-na-newsltr_20140816


    




Agenda (mostly obsolete:)
1: Legs of security: Confidentiality, Integrity, Availability, etc...
    5 minutes
    
2: Drilling down: How do Keychains and Encryption support security.
    Secrets versus private information.
    Immediacy of bad consequences when secrets are published.
    What aspects of security are NOT provided by the keychain or file encryption.
    5 minutes

3:  Mechanics of iphone security.
    Sandboxes, Phone locking, application file encryption, how the keychain stores data.
    5 minutes
    
4:  Mechanics of data storage APIs vs keychain APIs:
    data storage requires alloc, free, set, and get.
    Keychain provides Add, Update, Retrieve, Delete:
    Why not just use set, get, and delete?
    3 minutes

5:  The keychain Functions: Drilling down into the API: Why are the keychain arguments so obtuse, and what's with all the constants?
    Grouping and defining the constants.
    Speculating on why the keychain has a weird API.
    15 minutes

6:  Keeping a secret, A simple keyring API.
    Code samples:
     [KeyRing valueForKey:key]
     [KeyRing storeValue:value forKey:key]
    10 minutes.
    
7:  The legs again, stumbles in security.
    Open questions
    10-20 minutes
    
    
~ 60 minutes.




------------- Presentation Notes: ---------------------

0:
============
“If I maintain my silence about my secret it is my prisoner...if I let it slip from my tongue, I am ITS prisoner.” 
--- Arthur Schopenhauer ---
============







"Memory itself is an internal rumour; and when to this hearsay within the mind we add the falsified echoes that reach us from others, we have but a shifting and unseizable basis to build upon. The picture we frame of the past changes continually and grows every day less similar to the original experience which it purports to describe."
--- George Santayana ---







"Do not tell secrets to those whose faith and silence you have not already tested."
--- Elizabeth I ---






1: The Legs of Security

Security Objectives

Given an item of information:
  Who said it? How do we know they're them? (Accountability)
  Is this really what they said? Is this what they always said? (Integrity)
  Who else knows it? Who else should know it? (Confidentiality)
  Can those who should know it retrieve it when the need it? (Availability)
  
  Note that we explicitly do not ask "is it true?", because Information security cannot answer that question.




CIA: Confidentiality, Integrity, and Availability

Confidentiality (of data and system information)
 of data in most systems (e.g., authenticators), confidentiality is extremely important.

Integrity (of system and data)
  Can it be altered without detection? Has it been altered?

Availability (of systems and data for intended use only)
Availability is a requirement intended to assure that systems work promptly and service is not denied to authorized users. This objective protects against:
• Intentional or accidental attempts to either:
− perform unauthorized deletion of data or
− otherwise cause a denial of service or data.
• Attempts to use system or data for unauthorized purposes
Availability is frequently an organization’s foremost security objective.

Accountability (to the individual level)
Accountability is the requirement that actions of an entity may be traced uniquely to that entity.
Accountability is often an organizational policy requirement and directly supports non- repudiation, deterrence, fault isolation, intrusion detection and prevention, and after-action recovery and legal action.

Assurance (that the other four objectives have been adequately met)
Assurance is the basis for confidence that the security measures, both technical and operational, work as intended to protect the system and the information it processes. The other four security objectives (integrity, availability, confidentiality, and accountability) have been adequately met by a specific implementation when:
• required functionality is present and correctly implemented,
• there is sufficient protection against unintentional errors (by users or software), and
• there is sufficient resistance to intentional penetration or by-pass.
Assurance is essential; without it the other objectives are not met. However, assurance is a continuum; the amount of assurance needed varies between systems.
 
 
 
 2: Drilling down: How do Keychains and Encryption support security.
    Secrets versus private information.
    Immediacy of bad consequences when secrets are published.
    What aspects of security are NOT provided by the keychain or file encryption.
    5 minutes

 
3:  Mechanics of iphone security.
    Sandboxes, Phone locking, application file encryption, how the keychain stores data.
    5 minutes
    



5:  The keychain Functions: Drilling down into the API: Why are the keychain arguments so obtuse, and what's with all the constants?
    Grouping and defining the constants.
    Speculating on why the keychain has a weird API.
    15 minutes




 
 
 
 5:  The 4 keychain Functions:
    SecItemAdd();
    SecItemUpdate();
    SecItemCopyMatching();
    SecItemDelete();
    Drilling down: Why are their arguments so obtuse, and what's with all the constants?
    Grouping and defining the constants.
    15 minutes


 
 6:  Keeping a secret, A simple keyring API.
    Code samples:
     [KeyRing valueForKey:key]
     [KeyRing storeValue:value forKey:key]
     Still missing: [KeyRing removeKey:key]
    10 minutes.

 
 // just a place to collect and document the keychain constants

// just a place to collect and document the keychain constants




// From SecItem.h (most comments are mine)

extern CFTypeRef kSecClass;  // dictionary key marking a class type entry

// Possible class types:

extern CFTypeRef kSecClassGenericPassword;  // Generic password (a string)

extern CFTypeRef kSecClassInternetPassword; // Associated with a URI and account?

extern CFTypeRef kSecClassCertificate;      // Whole thing or just private key?

extern CFTypeRef kSecClassKey;              // Key versus password?

extern CFTypeRef kSecClassIdentity;         // What is an identity?


 
